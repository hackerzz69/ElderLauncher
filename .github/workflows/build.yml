name: Cross-OS Build

on:
  workflow_dispatch: {}
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build on ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            arch: x64
            build_script: ./build-win64.sh
          - os: ubuntu-latest
            arch: x86_64
            build_script: ./build-linux-x86_64.sh
          - os: macos-latest
            arch: x64
            build_script: ./build-osx-x64.sh
          - os: macos-latest
            arch: aarch64
            build_script: ./build-osx-aarch64.sh

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Make scripts executable (non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          chmod +x gradlew
          chmod +x build-*.sh

      - name: Gradle build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: .\gradlew.bat clean build -x test

      - name: Gradle build (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: ./gradlew clean build -x test

      - name: Install Windows packaging tools (7zip, Inno Setup, Resource Hacker)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          choco feature enable -n=allowGlobalConfirmation
          # Install 7zip and Inno Setup (ok if already installed)
          choco install 7zip innosetup --no-progress --yes || $true

          # Try to install Resource Hacker via Chocolatey (package may be named 'reshack')
          $installed = $false
          foreach ($pkg in @('resourcehacker','reshack','resourcehacker.portable')) {
            try {
              choco install $pkg --no-progress --yes
              $installed = $true
              break
            } catch {
              Write-Host "Failed to install $pkg via Chocolatey, trying next option..."
            }
          }

          # Fallback: download portable Resource Hacker zip directly and add to PATH
          if (-not $installed) {
            $zipUrl = 'https://www.angusj.com/resourcehacker/resource_hacker.zip'
            $zipPath = Join-Path $env:RUNNER_TEMP 'resource_hacker.zip'
            $destDir = Join-Path $env:RUNNER_TEMP 'ResourceHacker'
            Invoke-WebRequest -Uri $zipUrl -OutFile $zipPath
            if (Test-Path $destDir) { Remove-Item -Recurse -Force $destDir }
            New-Item -ItemType Directory -Path $destDir | Out-Null
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            [System.IO.Compression.ZipFile]::ExtractToDirectory($zipPath, $destDir)
            # Add to PATH for subsequent steps
            "$destDir" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            Write-Host "Resource Hacker extracted to $destDir"
          } else {
            # Try common install locations
            $paths = @(
              'C:\Program Files\Resource Hacker',
              'C:\ProgramData\chocolatey\lib\resourcehacker\tools',
              'C:\ProgramData\chocolatey\lib\reshack\tools'
            ) | Where-Object { Test-Path $_ }
            foreach ($p in $paths) { "$p" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append }
            Write-Host "Resource Hacker available via Chocolatey."
          }

      - name: Install macOS packaging tools (create-dmg)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew update
          brew install create-dmg

      - name: Package (OS-specific)
        shell: bash
        run: |
          echo "Running ${{ matrix.build_script }}"
          if [ "${{ runner.os }}" = "macOS" ]; then
            # Allow macOS packaging script to fail (codesign/keychain or dmg tool issues)
            ${{ matrix.build_script }} || echo "macOS packaging script failed; will attempt DMG creation manually."
          else
            ${{ matrix.build_script }}
          fi

      - name: Manually create DMG on macOS (fallback via hdiutil)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -e
          # Determine app path and arch-specific output directory
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            APP_PATH="native-osx-aarch64/OpenOSRS.app"
            OUT_DIR="native-osx-aarch64"
            DMG_NAME="OpenOSRS-aarch64.dmg"
          else
            APP_PATH="native-osx/OpenOSRS.app"
            OUT_DIR="native-osx"
            DMG_NAME="OpenOSRS-x64.dmg"
          fi

          # If DMG already exists (script succeeded), skip
          if [ -f "${OUT_DIR}/${DMG_NAME}" ]; then
            echo "DMG already exists at ${OUT_DIR}/${DMG_NAME}, skipping manual creation."
            exit 0
          fi

          # Ensure the .app bundle exists
          if [ ! -d "${APP_PATH}" ]; then
            echo "Expected app bundle not found at ${APP_PATH}"
            ls -la "${OUT_DIR}" || true
            exit 1
          fi

          # Prepare a staging folder for DMG contents
          STAGING="${OUT_DIR}/dmg_src"
          rm -rf "${STAGING}"
          mkdir -p "${STAGING}"
          cp -R "${APP_PATH}" "${STAGING}/"
          # Create Applications symlink for user convenience
          ln -s /Applications "${STAGING}/Applications" || true

          echo "Creating DMG ${OUT_DIR}/${DMG_NAME} from ${STAGING}"
          # Create compressed DMG
          hdiutil create -volname "OpenOSRS" -srcfolder "${STAGING}" -ov -format UDZO "${OUT_DIR}/${DMG_NAME}"

          echo "DMG created at ${OUT_DIR}/${DMG_NAME}"

      - name: Collect artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          # Common output folders (adjust if your scripts output elsewhere)
          cp -rv build/* artifacts/ 2>/dev/null || true
          cp -rv dist/* artifacts/ 2>/dev/null || true
          # Common installer/bundle formats
          find . -maxdepth 3 -type f \( \
            -name "*.exe" -o -name "*.msi" -o -name "*.zip" -o \
            -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o \
            -name "*.dmg" -o -name "*.pkg" -o -name "*.tar.gz" \
          \) -exec cp -v {} artifacts/ \; || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.arch }}-artifacts
          path: artifacts
          if-no-files-found: warn

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: |
            release_artifacts/**/*