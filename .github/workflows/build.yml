name: Cross-OS Build

on:
  workflow_dispatch: {}
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build on ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            arch: x64
            build_script: ./build-win64.sh
          - os: ubuntu-latest
            arch: x86_64
            build_script: ./build-linux-x86_64.sh
          - os: macos-latest
            arch: x64
            build_script: ./build-osx-x64.sh
          - os: macos-latest
            arch: aarch64
            build_script: ./build-osx-aarch64.sh

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Make scripts executable (non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          chmod +x gradlew
          chmod +x build-*.sh

      - name: Gradle build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: .\gradlew.bat clean build -x test

      - name: Gradle build (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: ./gradlew clean build -x test

      - name: Package (OS-specific)
        shell: bash
        run: |
          echo "Running ${{ matrix.build_script }}"
          ${{ matrix.build_script }}

      - name: Collect artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          # Common output folders (adjust if your scripts output elsewhere)
          cp -rv build/* artifacts/ 2>/dev/null || true
          cp -rv dist/* artifacts/ 2>/dev/null || true
          # Common installer/bundle formats
          find . -maxdepth 3 -type f \( \
            -name "*.exe" -o -name "*.msi" -o -name "*.zip" -o \
            -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o \
            -name "*.dmg" -o -name "*.pkg" -o -name "*.tar.gz" \
          \) -exec cp -v {} artifacts/ \; || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.arch }}-artifacts
          path: artifacts
          if-no-files-found: warn

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: |
            release_artifacts/**/*