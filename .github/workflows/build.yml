name: Cross-OS Build

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build on ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            arch: x64
            build_script: ./build-win64.sh
          - os: ubuntu-latest
            arch: x86_64
            build_script: ./build-linux-x86_64.sh
          - os: macos-latest
            arch: x64
            build_script: ./build-osx-x64.sh
          - os: macos-latest
            arch: aarch64
            build_script: ./build-osx-aarch64.sh

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Make scripts executable (non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          chmod +x gradlew
          chmod +x build-*.sh

      - name: Gradle build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: .\gradlew.bat clean build -x test

      - name: Gradle build (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: ./gradlew clean build -x test

      - name: Install Linux dependencies (FUSE for AppImage)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2

      - name: Install NSIS (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install nsis --no-progress --yes
          echo "NSIS installed successfully"

      - name: Build NSIS installer (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $nsisPath = 'C:\Program Files (x86)\NSIS'
          echo "$nsisPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          & "$nsisPath\makensis.exe" openosrs_launcher.nsi

      - name: Package (OS-specific)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "Running ${{ matrix.build_script }}"
          if [ "${{ runner.os }}" = "macOS" ]; then
            ${{ matrix.build_script }} || echo "macOS packaging script failed; will attempt DMG creation manually."
          else
            ${{ matrix.build_script }}
          fi

      - name: Manually create DMG on macOS (fallback via hdiutil)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -e
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            APP_PATH="native-osx-aarch64/OpenOSRS.app"
            OUT_DIR="native-osx-aarch64"
            DMG_NAME="OpenOSRS-aarch64.dmg"
          else
            APP_PATH="native-osx/OpenOSRS.app"
            OUT_DIR="native-osx"
            DMG_NAME="OpenOSRS-x64.dmg"
          fi
          if [ -f "${OUT_DIR}/${DMG_NAME}" ]; then
            echo "DMG already exists at ${OUT_DIR}/${DMG_NAME}, skipping manual creation."
            exit 0
          fi
          if [ ! -d "${APP_PATH}" ]; then
            echo "Expected app bundle not found at ${APP_PATH}"
            ls -la "${OUT_DIR}" || true
            exit 1
          fi
          STAGING="${OUT_DIR}/dmg_src"
          rm -rf "${STAGING}"
          mkdir -p "${STAGING}"
          cp -R "${APP_PATH}" "${STAGING}/"
          ln -s /Applications "${STAGING}/Applications" || true
          echo "Creating DMG ${OUT_DIR}/${DMG_NAME} from ${STAGING}"
          hdiutil create -volname "OpenOSRS" -srcfolder "${STAGING}" -ov -format UDZO "${OUT_DIR}/${DMG_NAME}"
          echo "DMG created at ${OUT_DIR}/${DMG_NAME}"

      - name: Collect artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          cp -rv build/* artifacts/ 2>/dev/null || true
          cp -rv dist/* artifacts/ 2>/dev/null || true
          find . -maxdepth 3 -type f \( \
            -name "*.exe" -o -name "*.msi" -o -name "*.zip" -o \
            -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o \
            -name "*.dmg" -o -name "*.pkg" -o -name "*.tar.gz" \
          \) -exec cp -v {} artifacts/ \; || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.arch }}-artifacts
          path: artifacts
          if-no-files-found: warn

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: Gather only launcher files
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p release_files
          echo "Collecting launcher files from downloaded artifacts..."
          found=0
          while IFS= read -r -d '' f; do
            echo "Adding: $f"
            cp -f "$f" release_files/
            found=$((found+1))
          done < <(find release_artifacts -type f \( \
                     -name "OpenOSRSSetup.exe" -o \
                     -name "OpenOSRS-*.dmg" -o \
                     -name "OpenOSRS*.AppImage" \
                   \) -print0)
          if [ "$found" -eq 0 ]; then
            echo "No launcher files found. Contents of release_artifacts:"
            find release_artifacts -maxdepth 3 -type f -printf "%P\n" || true
            exit 1
          fi
          echo "Collected $found launcher file(s)."

      - name: Publish GitHub Release (create or update, replace assets)
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generateReleaseNotes: true
          allowUpdates: true
          removeArtifacts: true
          artifactErrorsFailBuild: true
          artifacts: "release_files/*"
