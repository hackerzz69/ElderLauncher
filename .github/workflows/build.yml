name: Cross-OS Build

on:
  push:
    tags:
      - 'v*'

jobs:
  # -------------------
  # 1) Build once on Linux
  # -------------------
  build-linux:
    name: Gradle Build (Linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test -x checkstyleMain

      - name: Upload JARs
        uses: actions/upload-artifact@v4
        with:
          name: launcher-jars
          path: build/libs/*.jar

  # -------------------
  # 2) Windows Packaging (NSIS)
  # -------------------
  package-windows:
    needs: build-linux
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download jars
        uses: actions/download-artifact@v4
        with:
          name: launcher-jars
          path: native-win64

      - name: Install NSIS
        run: choco install nsis --yes --no-progress

      - name: Build NSIS installer
        shell: pwsh
        run: |
          $nsisPath = 'C:\Program Files (x86)\NSIS'
          $scriptPath = Join-Path $env:GITHUB_WORKSPACE "nsis\openosrs_launcher.nsi"
          if (-Not (Test-Path $scriptPath)) {
            Write-Error "NSIS script not found at $scriptPath"
            exit 1
          }
          & "$nsisPath\makensis.exe" $scriptPath

      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: nsis/OpenOSRSSetup.exe

  # -------------------
  # 3) macOS Packaging
  # -------------------
  package-macos:
    needs: build-linux
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, aarch64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download jars
        uses: actions/download-artifact@v4
        with:
          name: launcher-jars
          path: native-osx

      - name: Make build scripts executable
        run: chmod +x build-osx-*.sh

      - name: Run macOS packaging
        run: ./build-osx-${{ matrix.arch }}.sh || echo "macOS packaging script failed"

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-installer
          path: "native-osx*/OpenOSRS-*.dmg"

  # -------------------
  # 4) Linux Packaging (AppImage/DEB/RPM)
  # -------------------
  package-linux:
    needs: build-linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download jars
        uses: actions/download-artifact@v4
        with:
          name: launcher-jars
          path: native-linux

      - name: Make build scripts executable
        run: chmod +x build-linux-*.sh

      - name: Run Linux packaging
        run: ./build-linux-x86_64.sh || echo "Linux packaging failed"

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: |
            native-linux/*.AppImage
            native-linux/*.deb
            native-linux/*.rpm
            native-linux/*.tar.gz

  # -------------------
  # 5) Release
  # -------------------
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [package-windows, package-macos, package-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: Gather launcher files
        run: |
          mkdir -p release_files
          find release_artifacts -type f \( \
            -name "OpenOSRSSetup.exe" -o \
            -name "OpenOSRS-*.dmg" -o \
            -name "OpenOSRS*.AppImage" -o \
            -name "*.deb" -o \
            -name "*.rpm" -o \
            -name "*.tar.gz" \
          \) -exec cp -v {} release_files/ \;

      - name: Publish GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generateReleaseNotes: true
          allowUpdates: true
          removeArtifacts: true
          artifactErrorsFailBuild: true
          artifacts: "release_files/*"
